# HTML

<div></div>
{}

==>

LiquidTemplate(HTML)

# Ouput

{{ foo }}

==>

LiquidTemplate(Output(BeginOutput,Value(Identifier),EndOutput))

# Multiple Ouputs

{{ foo }}{{ bar }}

==>

LiquidTemplate(
  Output(BeginOutput,Value(Identifier),EndOutput)
  Output(BeginOutput,Value(Identifier),EndOutput)
)

# Quoted

{{ "foo" }}
{{ "foo bar" }}
{{ "foo \" bar" }}

==>

LiquidTemplate(
  Output(BeginOutput,Value(Literal(Quoted)),EndOutput)
  HTML
  Output(BeginOutput,Value(Literal(Quoted)),EndOutput)
  HTML
  Output(BeginOutput,Value(Literal(Quoted)),EndOutput)
)

# Range

{{ (1..3) }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Value(
      Range(
        Value(Literal(Number))
        ".."
        Value(Literal(Number))
      )
    )
    EndOutput
  )
)

# Range with Expressions

{{ (foo.bar..["foo"].size) }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Value(
      Range(
        Value(
          Identifier
          PropertyAccess(Identifier)
        )
        Value(
          SquareBracketProperty(Value(Literal(Quoted)))
          PropertyAccess(Identifier)
        )
      )
    )
    EndOutput
  )
)

# Value

{{ "foo".size }}
{{ foo.bar["zoo"].coo }}
{{ ["zoo"].coo[0][bar] }}
{{ foo[bar.coo["arr[".size]][0] }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Value(
      Literal(Quoted),
      PropertyAccess(Identifier)
    )
    EndOutput
  ),
  HTML,
  Output(
    BeginOutput
    Value(
      Identifier,
      PropertyAccess("." Identifier),
      PropertyAccess(SquareBracketProperty("[" Value(Literal(Quoted)) "]")),
      PropertyAccess(Identifier)
    )
    EndOutput
  ),
  HTML,
  Output(
    BeginOutput
    Value(
      SquareBracketProperty(Value(Literal(Quoted))),
      PropertyAccess(Identifier),
      PropertyAccess(SquareBracketProperty(Value(Literal(Number)))),
      PropertyAccess(SquareBracketProperty(Value(Identifier)))
    )
    EndOutput
  )
  HTML,
  Output(
    BeginOutput
    Value(
      Identifier,
      PropertyAccess(
        SquareBracketProperty(
          Value(
            Identifier
            PropertyAccess(Identifier),
            PropertyAccess(
              SquareBracketProperty(
                Value(
                  Literal(Quoted)
                  PropertyAccess(Identifier)
                )
              )
            )
          )
        )
      )
      PropertyAccess(
        SquareBracketProperty(
          Value(Literal(Number))
        )
      )
    )
    EndOutput
  )
)

# Filter

{{ foo | size: 3 }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Value(Identifier),
    Filter(
      FilterName(Identifier),
      FilterArgs(
        FilterArg(
          Value(Literal(Number))
        )
      )
    )
    EndOutput
  )
)

# Multiple Filters

{{ person | title: "Sr." | prepend: "Sir" }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Value(Identifier),
    Filter(
      FilterName(Identifier),
      FilterArgs(FilterArg(Value(Literal(Quoted))))
    ),
    Filter(
      FilterName(Identifier),
      FilterArgs(FilterArg(Value(Literal(Quoted))))
    ),
    EndOutput
  )
)

# Multiple Argument Filter

{{ person | card: "Sr.", age:18, report: mgrs[0].name }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Value(Identifier),
    Filter(
      FilterName(Identifier),
      FilterArgs(
        FilterArg(Value(Literal(Quoted))),
        FilterArg(KeyValuePair(Identifier,Value(Literal(Number)))),
        FilterArg(
          KeyValuePair(
            Identifier,
            Value(
              Identifier,
              PropertyAccess(SquareBracketProperty(Value(Literal(Number)))),
              PropertyAccess(Identifier)
            )
          )
        )
      )
    )
    EndOutput
  )
)

# Boolean

{{ true }}
{{ false }}

==>

LiquidTemplate(
  Output(BeginOutput,Value(Literal(Boolean)),EndOutput)
  HTML
  Output(BeginOutput,Value(Literal(Boolean)),EndOutput)
)

# Property Access

{{ foo.bar }}

==>

LiquidTemplate(
  Output(
    BeginOutput,
    Value(
      Identifier,
      PropertyAccess(Identifier)
    )
    EndOutput
  )
)

# Square Bracket Property Access

{{ foo["bar"] }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Value(
      Identifier,
      PropertyAccess(
        SquareBracketProperty(
          Value(Literal(Quoted))
        )
      )
    )
    EndOutput
  )
)

# Tag

{% foo %}
{% endfoo %}

==>

LiquidTemplate(
  Tag(
    BeginTag
    TagName(Identifier)
    EndTag
  )
  HTML
  Tag(
    BeginTag
    TagName(Identifier)
    EndTag
  )
)

# Tag with Arguments

{% foo reverse col : 3 row:rows[0] %}

==>

LiquidTemplate(
  Tag(
    BeginTag
    TagName(Identifier)
    UnkownTagArg
    EndTag
  )
)

# UnkownTagArg

{% foo people = - %}

==>

LiquidTemplate(
  Tag(
    BeginTag
    TagName(Identifier),
    UnkownTagArg
    EndTag
  )
)

# ForTag

{% for i in obj reversed limit : 3 offset:rows[0] %}

==>

LiquidTemplate(
  ForTag(
    BeginTag
    TagName
    Identifier
    in
    Value(Identifier),
    reversed
    limit ":" Value(Literal(Number))
    offset ":" Value(Identifier, PropertyAccess(SquareBracketProperty(Value(Literal(Number)))))
    EndTag
  )
)

# AssignTag

{% assign people = "alice, bob, carol" -%}

==>

LiquidTemplate(
  AssignTag(
    BeginTag
    TagName
    Identifier,
    "=",
    Value(Literal(Quoted))
    EndTag
  )
)
# AssignTag with Filter

{% assign people = "alic,bob" | split: "," %}

==>

LiquidTemplate(
  AssignTag(
    BeginTag
    TagName
    Identifier,
    "=",
    Value(Literal(Quoted))
    Filter(
      FilterName(Identifier)
      FilterArgs(
        FilterArg(Value(Literal(Quoted)))
      )
    )
    EndTag
  )
)

# EchoTag

{% echo "I am  and my favorite food is nnn." %}

==>

LiquidTemplate(
  EchoTag(BeginTag, TagName, Value(Literal(Quoted)), EndTag)
)

# LiquidTag

{% liquid
  assign favorite_food2 = "pizza"
  foo age2 = 35
  echo "foo"
%}

==>

LiquidTemplate(
  LiquidTag(
    BeginTag TagName
    TagName Identifier "=" Value(Literal(Quoted))
    TagName(Identifier) UnkownTagArg
    TagName Value(Literal(Quoted))
    EndTag
  )
)

# Space Control

{%- foo -%}
{{ bar -}}

==>

LiquidTemplate(
  Tag(BeginTag, TagName(Identifier), EndTag),
  HTML,
  Output(BeginOutput, Value(Identifier), EndOutput)
)
