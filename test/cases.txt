# Text

<div></div>
{}

==>

LiquidTemplate(Text)

# Ouput

{{ foo }}

==>

LiquidTemplate(Output(OutputStart,VariableName,OutputEnd))

# Multiple Ouputs

{{ foo }}{{ bar }}

==>

LiquidTemplate(
  Output(OutputStart,VariableName,OutputEnd)
  Output(OutputStart,VariableName,OutputEnd)
)

# Quoted

{{ "foo" }}
{{ "foo bar" }}
{{ "foo \" bar" }}

==>

LiquidTemplate(
  Output(OutputStart,Quoted,OutputEnd)
  Text
  Output(OutputStart,Quoted,OutputEnd)
  Text
  Output(OutputStart,Quoted,OutputEnd)
)

# Range

{{ (1..3) }}

==>

LiquidTemplate(
  Output(
    OutputStart
    Range(
      Number
      ".."
      Number
    )
    OutputEnd
  )
)

# Range with Expressions

{{ (foo.bar..["foo"].size) }}

==>

LiquidTemplate(
  Output(
    OutputStart
    Range(
      MemberExpression(VariableName, PropertyName)
      MemberExpression(MemberExpression(Quoted), PropertyName)
    )
    OutputEnd
  )
)

# Value

{{ "foo".size }}
{{ foo.bar["zoo"].coo }}
{{ ["zoo"].coo[0][bar] }}
{{ foo[bar.coo["arr[".size]][0] }}

==>

LiquidTemplate(
  Output(
    OutputStart
    MemberExpression(Quoted, PropertyName)
    OutputEnd
  ),
  Text,
  Output(
    OutputStart
    MemberExpression(
      MemberExpression(
        MemberExpression(
          VariableName,
          PropertyName
        ),
        "[" Quoted "]"
      )
      PropertyName
    )
    OutputEnd
  ),
  Text,
  Output(
    OutputStart
    MemberExpression(
      MemberExpression(
        MemberExpression(
          MemberExpression("[" Quoted "]")
          PropertyName
        )
        Number
      )
      "[" VariableName "]"
    )
    OutputEnd
  )
  Text,
  Output(
    OutputStart
    MemberExpression(
      MemberExpression(
        VariableName,
        MemberExpression(
          MemberExpression(VariableName, PropertyName)
          MemberExpression(Quoted, PropertyName)
        )
      )
      Number
    )
    OutputEnd
  )
)

# Filter

{{ foo | size: 3 }}

==>

LiquidTemplate(
  Output(
    OutputStart
    VariableName
    Filter(
      FilterName
      FilterArgs(
        FilterArg(Number)
      )
    )
    OutputEnd
  )
)

# Multiple Filters

{{ person | title: "Sr." | prepend: "Sir" }}

==>

LiquidTemplate(
  Output(
    OutputStart
    VariableName
    Filter(
      FilterName,
      FilterArgs(FilterArg(Quoted))
    ),
    Filter(
      FilterName,
      FilterArgs(FilterArg(Quoted))
    ),
    OutputEnd
  )
)

# Multiple Argument Filter

{{ person | card: "Sr.", age:18, report: mgrs[0].name }}

==>

LiquidTemplate(
  Output(
    OutputStart
    VariableName
    Filter(
      FilterName,
      FilterArgs(
        FilterArg(Quoted),
        FilterArg(KeyValuePair(ArgumentName,Number)),
        FilterArg(
          KeyValuePair(
            ArgumentName
            MemberExpression(
              MemberExpression(VariableName, Number)
              PropertyName
            )
          )
        )
      )
    )
    OutputEnd
  )
)

# Boolean

{{ true }}
{{ false }}

==>

LiquidTemplate(
  Output(OutputStart,Boolean,OutputEnd)
  Text
  Output(OutputStart,Boolean,OutputEnd)
)

# Property Access

{{ foo.bar }}

==>

LiquidTemplate(
  Output(
    OutputStart,
    MemberExpression(VariableName PropertyName)
    OutputEnd
  )
)

# Square Bracket Property Access

{{ foo["bar"] }}

==>

LiquidTemplate(
  Output(
    OutputStart
    MemberExpression(VariableName Quoted)
    OutputEnd
  )
)

# Tag

{% foo %}
{% endfoo %}

==>

LiquidTemplate(
  Tag(
    TagStart
    UnknownTag(TagName)
    TagEnd
  )
  Text
  Tag(
    TagStart
    UnknownTag(TagName)
    TagEnd
  )
)

# Tag with Arguments

{% foo reverse col : 3 row:rows[0] %}

==>

LiquidTemplate(
  Tag(
    TagStart
    UnknownTag(TagName UnknownTagArg)
    TagEnd
  )
)

# UnknownTagArg

{% foo people = - %}

==>

LiquidTemplate(
  Tag(
    TagStart
    UnknownTag(TagName, UnknownTagArg)
    TagEnd
  )
)

# ForTag

{% for i in obj reversed limit : 3 offset:rows[0] %}
{% endfor %}

==>

LiquidTemplate(
  ForBlock(
    Tag(
      TagStart
      ForTag(
        TagName
        VariableDefinition
        in
        VariableName,
        ArgumentName(reversed)
        ArgumentName(limit) ":" Number
        ArgumentName(offset) ":" MemberExpression(VariableName "[" Number "]")
      )
      TagEnd
    )
    Text
    Tag(TagStart EndForTag(TagName) TagEnd)
  )
)

# AssignTag

{% assign people = "alice, bob, carol" -%}

==>

LiquidTemplate(
  Tag(
    TagStart
    AssignTag(
      TagName
      VariableDefinition,
      Quoted
    )
    TagEnd
  )
)
# AssignTag with Filter

{% assign people = "alic,bob" | split: "," %}

==>

LiquidTemplate(
  Tag(
    TagStart
    AssignTag(
      TagName
      VariableDefinition,
      Quoted
      Filter(
        FilterName
        FilterArgs(
          FilterArg(Quoted)
        )
      )
    )
    TagEnd
  )
)

# EchoTag

{% echo "I am  and my favorite food is nnn." %}

==>

LiquidTemplate(
  Tag(TagStart, EchoTag(TagName, Quoted), TagEnd)
)

# LiquidTag

{% liquid
  assign favorite_food2 = "pizza"
  foo age2 = 35
  echo "foo"
%}

==>

LiquidTemplate(
  Tag(
    TagStart
    LiquidTag(
      TagName
      AssignTag(TagName VariableDefinition "=" Quoted)
      UnknownTag(TagName UnknownTagArg)
      EchoTag(TagName Quoted)
    )
    TagEnd
  )
)

# RenderBlock

{% render "color" with "red", shape: "rect" %}

==>

LiquidTemplate(
  Tag(
    TagStart
    RenderTag(TagName Quoted "with" Quoted "," KeyValuePair(ArgumentName ":" Quoted))
    TagEnd
  )
)

# TableRowTag

{% tablerow i in obj cols:3 limit : 3 offset:rows[0] %}
{% endtablerow %}

==>

LiquidTemplate(
  TableRowBlock(
    Tag(
      TagStart
      TableRowTag(
        TagName
        VariableDefinition
        in
        VariableName,
        ArgumentName(cols) ":" Number
        ArgumentName(limit) ":" Number
        ArgumentName(offset) ":" MemberExpression(VariableName "[" Number "]")
      )
      TagEnd
    )
    Text
    Tag(TagStart EndTableRowTag(TagName) TagEnd)
  )
)

# RawBlock

{% raw %}
  {% for i in array %}
{% endraw %}

==>

LiquidTemplate(
  RawBlock(
    Tag(
      TagStart
      RawTag(TagName)
      TagEnd
    )
    RawText
    Tag(
      TagStart
      EndRawTag(TagName)
      TagEnd
    )
  )
)

# CommentBlock

{% comment %}
  {% for i in array %}
{% endcomment %}

==>

LiquidTemplate(
  CommentBlock(
    Tag(
      TagStart
      CommentTag(TagName)
      TagEnd
    )
    CommentText
    Tag(
      TagStart
      EndCommentTag(TagName)
      TagEnd
    )
  )
)

# Space Control

{%- foo -%}
{{ bar -}}

==>

LiquidTemplate(
  Tag(TagStart, UnknownTag(TagName), TagEnd),
  Text,
  Output(OutputStart, VariableName, OutputEnd)
)
