# HTML

<div></div>
{}

==>

LiquidTemplate(HTML)

# Ouput

{{ foo }}

==>

LiquidTemplate(Output(BeginOutput,Variable,EndOutput))

# Multiple Ouputs

{{ foo }}{{ bar }}

==>

LiquidTemplate(
  Output(BeginOutput,Variable,EndOutput)
  Output(BeginOutput,Variable,EndOutput)
)

# Quoted

{{ "foo" }}
{{ "foo bar" }}
{{ "foo \" bar" }}

==>

LiquidTemplate(
  Output(BeginOutput,Quoted,EndOutput)
  HTML
  Output(BeginOutput,Quoted,EndOutput)
  HTML
  Output(BeginOutput,Quoted,EndOutput)
)

# Range

{{ (1..3) }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Range(
      Number
      ".."
      Number
    )
    EndOutput
  )
)

# Range with Expressions

{{ (foo.bar..["foo"].size) }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Range(
      MemberExpression(Variable, PropertyName)
      MemberExpression(MemberExpression(Quoted), PropertyName)
    )
    EndOutput
  )
)

# Value

{{ "foo".size }}
{{ foo.bar["zoo"].coo }}
{{ ["zoo"].coo[0][bar] }}
{{ foo[bar.coo["arr[".size]][0] }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    MemberExpression(Quoted, PropertyName)
    EndOutput
  ),
  HTML,
  Output(
    BeginOutput
    MemberExpression(
      MemberExpression(
        MemberExpression(
          Variable,
          PropertyName
        ),
        "[" Quoted "]"
      )
      PropertyName
    )
    EndOutput
  ),
  HTML,
  Output(
    BeginOutput
    MemberExpression(
      MemberExpression(
        MemberExpression(
          MemberExpression("[" Quoted "]")
          PropertyName
        )
        Number
      )
      "[" Variable "]"
    )
    EndOutput
  )
  HTML,
  Output(
    BeginOutput
    MemberExpression(
      MemberExpression(
        Variable,
        MemberExpression(
          MemberExpression(Variable, PropertyName)
          MemberExpression(Quoted, PropertyName)
        )
      )
      Number
    )
    EndOutput
  )
)

# Filter

{{ foo | size: 3 }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Variable
    Filter(
      FilterName
      FilterArgs(
        FilterArg(Number)
      )
    )
    EndOutput
  )
)

# Multiple Filters

{{ person | title: "Sr." | prepend: "Sir" }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Variable
    Filter(
      FilterName,
      FilterArgs(FilterArg(Quoted))
    ),
    Filter(
      FilterName,
      FilterArgs(FilterArg(Quoted))
    ),
    EndOutput
  )
)

# Multiple Argument Filter

{{ person | card: "Sr.", age:18, report: mgrs[0].name }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    Variable
    Filter(
      FilterName,
      FilterArgs(
        FilterArg(Quoted),
        FilterArg(KeyValuePair(Variable,Number)),
        FilterArg(
          KeyValuePair(
            Variable
            MemberExpression(
              MemberExpression(Variable, Number)
              PropertyName
            )
          )
        )
      )
    )
    EndOutput
  )
)

# Boolean

{{ true }}
{{ false }}

==>

LiquidTemplate(
  Output(BeginOutput,Boolean,EndOutput)
  HTML
  Output(BeginOutput,Boolean,EndOutput)
)

# Property Access

{{ foo.bar }}

==>

LiquidTemplate(
  Output(
    BeginOutput,
    MemberExpression(Variable PropertyName)
    EndOutput
  )
)

# Square Bracket Property Access

{{ foo["bar"] }}

==>

LiquidTemplate(
  Output(
    BeginOutput
    MemberExpression(Variable Quoted)
    EndOutput
  )
)

# Tag

{% foo %}
{% endfoo %}

==>

LiquidTemplate(
  Tag(
    BeginTag
    TagName
    EndTag
  )
  HTML
  Tag(
    BeginTag
    TagName
    EndTag
  )
)

# Tag with Arguments

{% foo reverse col : 3 row:rows[0] %}

==>

LiquidTemplate(
  Tag(
    BeginTag
    TagName
    UnkownTagArg
    EndTag
  )
)

# UnkownTagArg

{% foo people = - %}

==>

LiquidTemplate(
  Tag(
    BeginTag
    TagName,
    UnkownTagArg
    EndTag
  )
)

# ForTag

{% for i in obj reversed limit : 3 offset:rows[0] %}

==>

LiquidTemplate(
  ForTag(
    BeginTag
    TagName
    Variable
    in
    Variable,
    reversed
    limit ":" Number
    offset ":" MemberExpression(Variable "[" Number "]")
    EndTag
  )
)

# AssignTag

{% assign people = "alice, bob, carol" -%}

==>

LiquidTemplate(
  AssignTag(
    BeginTag
    TagName
    Variable,
    "=",
    Quoted
    EndTag
  )
)
# AssignTag with Filter

{% assign people = "alic,bob" | split: "," %}

==>

LiquidTemplate(
  AssignTag(
    BeginTag
    TagName
    Variable,
    "=",
    Quoted
    Filter(
      FilterName
      FilterArgs(
        FilterArg(Quoted)
      )
    )
    EndTag
  )
)

# EchoTag

{% echo "I am  and my favorite food is nnn." %}

==>

LiquidTemplate(
  EchoTag(BeginTag, TagName, Quoted, EndTag)
)

# LiquidTag

{% liquid
  assign favorite_food2 = "pizza"
  foo age2 = 35
  echo "foo"
%}

==>

LiquidTemplate(
  LiquidTag(
    BeginTag TagName
    TagName Variable "=" Quoted
    TagName UnkownTagArg
    TagName Quoted
    EndTag
  )
)

# Space Control

{%- foo -%}
{{ bar -}}

==>

LiquidTemplate(
  Tag(BeginTag, TagName, EndTag),
  HTML,
  Output(BeginOutput, Variable, EndOutput)
)
