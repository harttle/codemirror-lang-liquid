@top LiquidTemplate { (Output | outerTag | HTML)* }

@skip { space } {
    outerTag[@name="Tag"] { tag<innerTag> | tag<LiquidTag> }
    innerTag {
        AssignTag { tagName<"assign"> VariableDefinition "=" filteredValue } |
        BlockTag { tagName<"block"> Label } |
        BreakTag { tagName<"break"> } |
        CaptureTag { tagName<"capture"> VariableDefinition } |
        CaseTag { tagName<"case"> value } |
        ContinueTag { tagName<"continue"> } |
        CycleTag { tagName<"cycle"> (Label ":")? value ("," value)* } |
        DecrementTag { tagName<"decrement"> (VariableName | MemberExpression) } |
        EchoTag { tagName<"echo"> filteredValue } |
        ForTag { tagName<"for"> VariableDefinition kw<"in"> value (arg<"reversed"> | kv<"offset"> | kv<"limit"> | ArgumentName | KeyValuePair)* } |
        IfTag { tagName<"if"> value } |
        Include { tagName<"include"> value ("with" ":" value)? ("," KeyValuePair)* } |
        IncrementTag { tagName<"increment"> (VariableName | MemberExpression) } |
        InlineCommentTag { tagName<"#"> UnknownTagArg? } |
        Layout { tagName<"layout"> value ("with" ":" value)? ("," KeyValuePair)* } |
        Render { tagName<"render"> value ("with" ":" value)? ("," KeyValuePair)* } |
        TableRowTag { tagName<"tablerow"> VariableDefinition kw<"in"> value (kv<"cols"> | kv<"offset"> | kv<"limit"> | ArgumentName | KeyValuePair)* } |
        UnlessTag { tagName<"unless"> value } |
        UnknownTag { unknownTagName (UnknownTagArg)* }
    }
    LiquidTag { tagName<"liquid"> (linebreak+ innerTag)* linebreak* }

    value { VariableName | MemberExpression | literal | Range }
    literal { Quoted | Number | Boolean | DropLiteral | Null }
	VariableName { identifier }
	VariableDefinition { identifier }
    Label { identifier }
	PropertyName { identifier }
	MemberExpression { value ("." PropertyName | "[" value "]") | "[" value "]"}
    Range { "(" value ".." value ")"}

    ArgumentName { identifier }
    KeyValuePair { ArgumentName ":" value }
    kv<T> { arg<T> ":" value }
    filteredValue { value (Filter)* }
    Output { OutputStart filteredValue OutputEnd }

    Filter { "|" FilterName ":" FilterArgs }
    FilterName { identifier }
    FilterArgs { FilterArg ("," FilterArg)* }
    FilterArg { value | KeyValuePair }

    tag<T> { TagStart T TagEnd }
    tagName[@name="TagName"]<T> { @specialize<identifier, T> }
    unknownTagName[@name="TagName"] { identifier }
}

arg[@name="ArgumentName"]<type> { @specialize[@name={type}]<identifier, type> }
kw[@name={type}]<type> { @specialize<identifier, type> }
Boolean { @specialize<identifier, "true" | "false"> }
Null { @specialize<identifier, "nil" | "null"> }
DropLiteral { @specialize<identifier, "empty" | "blank" | "forloop"> }

@tokens {
    TagStart[closedBy=TagEnd] { "{%" | "{%-" }
    TagEnd[openedBy=TagStart] { "%}" | "-%}" }
    OutputStart[closedBy=OutputEnd] { "{{" | "{{-" }
    OutputEnd[openedBy=OutputStart] { "}}" | "-}}" }

    identifier { @asciiLetter (@asciiLetter | @digit | "_" | "#")* }
    Number { @digit+ ("." @digit+)? }
    Quoted { "\"" (!["] | '\\"')* "\"" | "'" (!['] | "\\'")* "'"}
    HTML { (![{] | "{" ![{%])+ }
    UnknownTagArg { (![%\r\n] | "%" ![}\r\n] | "%" @eof )+ }

    "["
    "]"
    "."
    ":"
    "="
    ".."
    linebreak { "\r"? "\n" }
    space { (" " | "\t")+ }

    @precedence { TagStart, OutputStart, TagEnd, OutputEnd, Quoted, Number, identifier, space, "..", "=", ":", ".", "[", "]", UnknownTagArg }
}
