@top LiquidTemplate { template* }

template { Output | tagBlock | Text }
forTemplate { template | tag<ContinueTag> | tag<BreakTag> }
tagBlock {
    tag<AssignTag | BlockTag | CycleTag | IncrementTag | DecrementTag | EchoTag | IncludeTag | RenderTag | LayoutTag | LiquidTag | UnknownTag> |
    CaptureBlock {
        tag<CaptureTag>
        template*
        tag<EndCaptureTag>
    } |
    CaseBlock {
        tag<CaseTag>
        (tag<WhenTag> template*)?
        (tag<ElseTag> template*)?
        tag<EndCaseTag>
    } |
    ForBlock {
        tag<ForTag> forTemplate*
        (tag<ElseTag> forTemplate*)?
        tag<EndForTag>
    } |
    IfBlock {
        tag<IfTag> template*
        (tag<ElsifTag> template*)?
        (tag<ElseTag> template*)?
        tag<EndIfTag>
    } |
    TableRowBlock {
        tag<TableRowTag> template*
        (tag<ElseTag> template*)?
        tag<EndTableRowTag>
    } |
    CommentBlock {
        tag<CommentTag>
        CommentText
        endcommentTag
    } |
    RawBlock {
        tag<RawTag>
        RawText
        endrawTag
    }
}

@skip { space } {
    innerTag { AssignTag | BlockTag | BreakTag | CaptureTag | EndCaptureTag | CaseTag | WhenTag | EndCaseTag | ContinueTag | CycleTag | DecrementTag | EchoTag | ForTag | EndForTag | IfTag | ElsifTag | ElseTag | EndIfTag | IncludeTag | IncrementTag | InlineCommentTag | LayoutTag | RenderTag | TableRowTag | EndTableRowTag | UnlessTag | RawTag | EndRawTag | UnknownTag }
    AssignTag { tagName<"assign"> VariableDefinition "=" filteredValue }
    BlockTag { tagName<"block"> Label }
    BreakTag { tagName<"break"> }
    CaptureTag { tagName<"capture"> VariableDefinition }
    CaseTag { tagName<"case"> value }
    CommentTag { tagName<"comment"> }
    WhenTag { tagName<"when"> value }
    ContinueTag { tagName<"continue"> }
    CycleTag { tagName<"cycle"> (Label ":")? value ("," value)* }
    DecrementTag { tagName<"decrement"> (VariableName | MemberExpression) }
    EchoTag { tagName<"echo"> filteredValue }
    ElsifTag { tagName<"elsif"> value }
    ElseTag { tagName<"else"> value }
    EndCaptureTag { tagName<"endcapture"> }
    EndCaseTag { tagName<"endcase"> }
    EndCommentTag { tagName<"endcomment"> }
    EndForTag { tagName<"endfor"> }
    EndIfTag { tagName<"endif"> }
    EndRawTag { tagName<"endraw"> }
    EndTableRowTag { tagName<"endtablerow"> }
    ForTag { tagName<"for"> VariableDefinition kw<"in"> value (arg<"reversed"> | kv<"offset"> | kv<"limit">)* tagArg* }
    IfTag { tagName<"if"> value }
    IncludeTag { tagName<"include"> value (renderArgument ("," renderArgument)*)? }
    IncrementTag { tagName<"increment"> (VariableName | MemberExpression) }
    InlineCommentTag { tagName<"#"> UnknownTagArg? }
    LayoutTag { tagName<"layout"> value (renderArgument ("," renderArgument)*)? }
    RawTag { tagName<"raw"> }
    RenderTag { tagName<"render"> value (renderArgument ("," renderArgument)*)? }
    TableRowTag { tagName<"tablerow"> VariableDefinition kw<"in"> value (kv<"cols"> | kv<"offset"> | kv<"limit"> | ArgumentName | KeyValuePair)* }
    UnlessTag { tagName<"unless"> value }
    UnknownTag { unknownTagName (UnknownTagArg)* }
    LiquidTag { tagName<"liquid"> (linebreak+ innerTag)* linebreak* }

    value { VariableName | MemberExpression | literal | Range }
    literal { Quoted | Number | Boolean | DropLiteral | Null }
	VariableName { identifier }
	VariableDefinition { identifier }
    Label { identifier }
	PropertyName { identifier }
	MemberExpression { value ("." PropertyName | "[" value "]") | "[" value "]"}
    Range { "(" value ".." value ")"}

    ArgumentName { identifier }
    KeyValuePair { ArgumentName ":" value }
    kv<T> { arg<T> ":" value }
    renderArgument { kw<"with"> ":"? value | KeyValuePair }
    filteredValue { value (Filter)* }
    Output { OutputStart filteredValue OutputEnd }

    Filter { "|" FilterName ":" FilterArgs }
    FilterName { identifier }
    FilterArgs { FilterArg ("," FilterArg)* }
    FilterArg { value | KeyValuePair }

    tag[@name="Tag"]<T> { TagStart T TagEnd }
    tagName[@name="TagName"]<T> { @specialize<identifier, T> }
    unknownTagName[@name="TagName"] { identifier }
    tagArg { ArgumentName | KeyValuePair }
    endcommentTag[@name=Tag] { endcommentTagStart EndCommentTag TagEnd }
    endrawTag[@name=Tag] { endrawTagStart EndRawTag TagEnd }
}

arg[@name="ArgumentName"]<type> { @specialize[@name={type}]<identifier, type> }
kw[@name={type}]<type> { @specialize<identifier, type> }
Boolean { @specialize<identifier, "true" | "false"> }
Null { @specialize<identifier, "nil" | "null"> }
DropLiteral { @specialize<identifier, "empty" | "blank" | "forloop"> }
@external tokens comment from "./tokens" {
  endcommentTagStart[@name="TagStart", closedBy="TagEnd"]
  CommentText
}
@external tokens raw from "./tokens" {
  endrawTagStart[@name="TagStart", closedBy="TagEnd"]
  RawText
}

@tokens {
    TagStart[closedBy=TagEnd] { "{%" | "{%-" }
    TagEnd[openedBy=TagStart] { "%}" | "-%}" }
    OutputStart[closedBy=OutputEnd] { "{{" | "{{-" }
    OutputEnd[openedBy=OutputStart] { "}}" | "-}}" }

    identifier { @asciiLetter (@asciiLetter | @digit | "_" | "#")* }
    Number { @digit+ ("." @digit+)? }
    Quoted { "\"" (!["] | '\\"')* "\"" | "'" (!['] | "\\'")* "'"}
    Text { (![{] | "{" ![{%])+ }
    UnknownTagArg { (![%\r\n] | "%" ![}\r\n] | "%" @eof )+ }

    "["
    "]"
    ","
    "."
    ":"
    "="
    ".."
    linebreak { "\r"? "\n" }
    space { (" " | "\t")+ }

    @precedence { TagStart, OutputStart, TagEnd, OutputEnd, Quoted, Number, identifier, space, "..", "=", ":", ".", "[", "]", UnknownTagArg }
}
